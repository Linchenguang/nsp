#include "Score.h"

using namespace jian;

Score::Score() {
	string lib = getenv("RNA");
	par_dist_obs = lib + "dist.par";
	par_dist_ref = "";
	dihPar = lib + "par_dih";
	cutoff = 20;
	bin = 0.5;
	reference_state = "average";
	distWeight = 1;
	dihWeight = 1;

	distAnal = new DistAnal(cutoff, bin, reference_state);
	dihAnal = new DihAnal;
	distAnal->readObsParm(par_dist_obs);
	distAnal->readRefParm(par_dist_ref);
	dihAnal->readParm(dihPar);
}

Score::Score(char *parm) {
	string lib = getenv("RNA");
	par_dist_obs = lib + "dist.par";
	par_dist_ref = "";
	dihPar = lib + "par_dih";
	cutoff = 20;
	bin = 0.5;
	reference_state = "average";
	distWeight = 1;
	dihWeight = 1;

	ifstream ifile(parm);
	while (ifile) {
		string line;
		getline(ifile, line);
		vector<string> splited_line;
		tokenize(line, splited_line, " ,:");
		if (splited_line.size() != 2) continue;
		if (splited_line[0] == "par_dist_obs") {
			par_dist_obs = splited_line[1];
		} else if (splited_line[0] == "par_dist_ref") {
			par_dist_ref = splited_line[1]; 
		} else if (splited_line[0] == "par_dih") {
			dihPar = splited_line[1]; 
		} else if (splited_line[0] == "cutoff") {
			cutoff = atoi(splited_line[1].c_str());
		} else if (splited_line[0] == "bin_width") {
			bin = atof(splited_line[1].c_str());
		} else if (splited_line[0] == "dist_weight") {
			distWeight = atof(splited_line[1].c_str());
		} else if (splited_line[0] == "dih_weight") {
			dihWeight = atof(splited_line[1].c_str());
		} else if (splited_line[0] == "reference_state") {
			reference_state = splited_line[1];
		}
	}
	ifile.close();

	distAnal = new DistAnal(cutoff, bin, reference_state);
	dihAnal = new DihAnal;
	distAnal->readObsParm(par_dist_obs);
	distAnal->readRefParm(par_dist_ref);
	dihAnal->readParm(dihPar);
}

double Score::run(Obj<RNA> rna) {
	distAnal->readRNA(rna);
	dihAnal->readRNA(rna);
	double distScore = distAnal->scoring();
	double dihScore = dihAnal->scoring();
	// cerr << rna->name << ' ' << distScore << ' ' << dihScore << endl;
	// double *score = distAnal->getScore();
	// cerr << rna->name << ' ' << score[0] << ' ' << score[1] << ' ' << score[2] << ' ' << score[3] << ' ' << score[4] << ' ' << dihScore << endl;
	return distWeight * distScore + dihWeight * dihScore;
}

