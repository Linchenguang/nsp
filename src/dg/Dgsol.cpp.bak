#include "Dgsol.h"

namespace jian {

namespace dg {

MatrixXf Dgsol::operator ()(const std::vector<std::tuple<int, int, double, double>> &dists, int num) {
    int num_atoms = num;
    int num_dists = dists.size();
    int n = 3*num_atoms;

    int seed = 1;
    int lintWkSp = 2*num_atoms > num_dists ? 2*num_atoms : num_dists;
    int ldblWkSp = 22*n + 21;
    int *intWkSp = (int *) malloc (lintWkSp*sizeof(int)); 
    double *dblWkSp = (double *) malloc (ldblWkSp*sizeof(double));

    int *iInd = (int *) malloc (num_dists*sizeof(int)); 
    int *jInd = (int *) malloc (num_dists*sizeof(int)); 
    double *lbd = (double *) malloc (num_dists*sizeof(double)); 
    double *ubd = (double *) malloc (num_dists*sizeof(double)); 
    for (int i = 0; i < dists.size(); i++) {
        iInd[i] = std::pow(std::get<0>(dists[i]), 2);
        jInd[i] = std::pow(std::get<1>(dists[i]), 2);
        lbd[i] = std::pow(std::get<2>(dists[i]), 2);
        ubd[i] = std::pow(std::get<3>(dists[i]), 2);
    }

    double *fOpt = (double *) malloc (sizeof(double));
    double *dErr = (double *) malloc (3*sizeof(double));
    double *xOpt = (double *) malloc (n*sizeof(double));

    /// Dgsol optimization
    dginitial (&num_atoms,xOpt,&num_dists,iInd,jInd,lbd,ubd,&seed,intWkSp);
    dgopt (&num_atoms,xOpt,fOpt,&num_dists,iInd,jInd,lbd,ubd,intWkSp,dblWkSp);
    dgerr (&num_atoms,xOpt,fOpt,&num_dists,iInd,jInd,lbd,ubd,dErr);

    /// Construct coordinates
    MatrixXf coords(num_atoms, 3);
    for (int i = 0; i < n; i++) {
        coords(i / 3, i % 3) = xOpt[i];
    }
    return coords;
}

} /// namespace dg

} /// namespace jian

